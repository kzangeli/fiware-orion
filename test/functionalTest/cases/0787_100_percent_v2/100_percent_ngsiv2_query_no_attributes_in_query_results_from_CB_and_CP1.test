# Copyright 2019 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Query With Empty Attribute Vector, Results From CB and CP1

--SHELL-INIT--
dbInit CB
dbInit CP1
brokerStart CB
brokerStart CP1

--SHELL--

#
# 01. Create E1/T1/A1+A2 in CB
# 02. Create E1/T1/A3+A4+A5 in CP1
# 03. Register E1/T1/A1+A2-CP1 in CB
# 04. Query E1/T1/{} in CB
#

echo "01. Create E1/T1/A1+A2 in CB"
echo "============================"
payload='{
  "type": "T1",
  "id":   "E1",
  "A1": {
    "type": "string",
    "value": "A1 in CB"
  },
  "A2": {
    "type": "string",
    "value": "A2 in CB"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. Create E1/T1/A3+A4+A5 in CP1"
echo "================================"
payload='{
  "type": "T1",
  "id":   "E1",
  "A3": {
    "type": "string",
    "value": "A3 in CP1"
  },
  "A4": {
    "type": "string",
    "value": "A4 in CP1"
  },
  "A5": {
    "type": "string",
    "value": "A5 in CP1"
  }
}'
orionCurl --url /v2/entities --payload "$payload" --port $CP1_PORT
echo
echo


echo "03. Register E1/T1/A3+A4+A5-CP1 in CB"
echo "====================================="
payload='{
  "dataProvided": {
    "entities": [
      {
        "type": "T1",
        "id": "E1"
      }
    ],
    "attrs": [ "A3", "A4", "A5" ]
  },
  "provider": {
    "http": {
      "url": "http://localhost:'${CP1_PORT}'/v2"
    },
    "legacyForwarding": false
  }
}'
orionCurl --url /v2/registrations --payload "$payload"
echo
echo


echo "04. Query E1/T1/{} in CB"
echo "========================"
orionCurl --url '/v2/entities?id=E1&type=T1'
echo
echo


--REGEXPECT--
01. Create E1/T1/A1+A2 in CB
============================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create E1/T1/A3+A4+A5 in CP1
================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Register E1/T1/A3+A4+A5-CP1 in CB
=====================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/registrations/REGEX([0-9a-f\-]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. Query E1/T1/{} in CB
========================
HTTP/1.1 200 OK
Content-Length: 308
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A1": {
            "metadata": {},
            "type": "string",
            "value": "A1 in CB"
        },
        "A2": {
            "metadata": {},
            "type": "string",
            "value": "A2 in CB"
        },
        "A3": {
            "metadata": {},
            "type": "string",
            "value": "A3 in CP1"
        },
        "A4": {
            "metadata": {},
            "type": "string",
            "value": "A4 in CP1"
        },
        "A5": {
            "metadata": {},
            "type": "string",
            "value": "A5 in CP1"
        },
        "id": "E1",
        "type": "T1"
    }
]


--TEARDOWN--
brokerStop CB
brokerStop CP1
dbDrop CB
dbDrop CP1
